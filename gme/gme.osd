<?xml version="1.0" encoding="UTF-8"?>
<data>
    <!-- some enumerations for the playscripts -->
    <enumDef name="comparisonOperator" type="UInt16">
        <entry name="equal" value="65529" />
        <entry name="unknownFFFA" value="65530" />
        <entry name="less" value="65531" />
        <entry name="greater" value="65533" />
        <entry name="unknownFFFE" value="65534" />
        <entry name="notequal" value="65535" />
    </enumDef>
    <enumDef name="registerOrValue" type="UInt8">
        <entry name="register" value="0" />
        <entry name="value" value="1" />
    </enumDef>
    <enumDef name="command" type="UInt16">
        <entry name="setRegister" value="65529" />
        <entry name="incrementRegister" value="65520" />
        <entry name="playAudio" value="65512" />
        <entry name="playRandom" value="64512" />
        <entry name="beginGame" value="64768" />
        <entry name="cancelGameMode" value="64255" />
        <entry name="decrementRegister" value="62719" />
        <entry name="unknownFFF8" value="65528" />
    </enumDef>

    <struct name="gmeFile">
        <struct name="gmeHeader">
            <pointer name="playScriptTableOffset" type="UInt32" target="playScriptTable">
                <struct name="playScriptTable">
                    <primitive name="lastUsedOIDCode" type="UInt32"/>
                    <primitive name="firstUsedOIDCode" type="UInt32"/>
                    <!--     
                    Then, 32bit offsets that point to play scripts (see below). These correspond linearly to the OID codes. E.g. WWW_Bauernhof: The first piglet on page 6 has OID code 1499, the corresponding play script is located at 0x766A. The 100th 32bit word in the script table contains that offset. So 4Ã—(OID - 1401) = script table index + 8. The value 1401 in this example is the first used OID code in the product (second 32bit word in the script table). 
                    Some of these offsets are 0xFFFFFFFF. This indicates that the corresponding OID code is not used within the product.
                    -->
                    <array name="playScriptOffsets" length="function() { return this.parent.lastUsedOIDCode.value - this.parent.firstUsedOIDCode.value; }">
                        <pointer name="playScriptOffset" type="UInt32" target="playScript">
                            <!-- now the actual play scripts 
                                A play script consists of a 16bit number (defining the length of the list to follow) and a list of 32bit offsets. The offsets point to script lines.
                            -->
                            <struct name="playScript">
                                <primitive name="playScriptLineCount" type="UInt16"/>
                                <array name="playScriptLineOffsets" length="playScriptLineCount">
                                    <pointer name="playScriptLineOffset" type="UInt32">
                                        <!--
                                        A script line consists of a list of conditionals, a list of actions, and a so called playlist consisting media file table indices.

                                        A script line has the format aaaa conditionals... bbbb actions... cccc media... where

                                            a is the number of conditionals. Each conditional consists of 8 bytes.
                                            b is the number of actions. Each action is 7 bytes.
                                            c is a playlist
                                        -->
                                        <struct name="playScriptLine">
                                            <primitive name="conditionalCount" type="UInt16"/>
                                            <array name="conditionals" length="conditionalCount">
                                                <!--
                                                The conditionals are of the format t1 aaaa cccc t2 bbbb

                                                    t1 & t2 (uint8) type of a and b resp. (0 == register, 1 == value)
                                                    a & b (uint16) value or id of register
                                                    c (uint16) is the comparison operator
                                                -->
                                                <struct name="conditional">
                                                    <enum name="type1" enum="registerOrValue" type="UInt8"/>
                                                    <primitive name="value1" type="UInt16"/>
                                                    <enum name="comparisonOperator" enum="comparisonOperator" type="UInt16"/>
                                                    <enum name="type2" enum="registerOrValue" type="UInt8"/>
                                                    <primitive name="value2" type="UInt16"/>
                                                </struct>
                                            </array>
                                            <!--
                                            The actions are of the format rrrr cccc tt mmmm

                                                r (uint16) id of register
                                                c (uint16) is the command
                                                t (uint8) type of m (0 == register, 1 == value)
                                                m (uint16) value or id of register
                                            -->
                                            <primitive name="actionCount" type="UInt16"/>
                                            <array name="actions" length="actionCount">
                                                <struct name="action">
                                                    <primitive name="register" type="UInt16"/>
                                                    <enum name="command" enum="command" type="UInt16"/>
                                                    <enum name="type" enum="registerOrValue" type="UInt8"/>
                                                    <primitive name="value" type="UInt16"/>
                                                </struct>
                                            </array>
                                            <primitive name="listLength" type="UInt16"/>
                                            <array name="playlistValues" length="listLength">
                                                <primitive name="oid" type="UInt16"/>
                                            </array>
                                        </struct>
                                    </pointer>
                                </array>
                            </struct>
                        </pointer>
                    </array>
                </struct>
            </pointer>
            <pointer name="mediaFileTableOffset" type="UInt32" target="mediaFileTable">
                <struct name="mediaFileTable">
                    <primitive name="endOffset" type="UInt32"/>
                    <primitive name="unused" type="UInt32"/>
                    <array name="mediaFileTableOffsets" length="function() { return (this.parent.endOffset.value - this.parent.parent.value)/8 - 1; }">    <!-- TODO: how to calculate "endOffset - currentpos -1 / 4"?! -->
                        <struct name="mediaFileInfo">
                            <pointer name="mediaFileOffset" type="UInt32" target="mediaFileContent">
                                <array name="mediaFileContent" length="function() { return this.parent.parent.mediaFileLength.value; }">
                                    <primitive name="content" type="UInt8"/>
                                </array>
                            </pointer>
                            <primitive name="mediaFileLength" type="UInt32"/>
                        </struct>
                    </array>
                </struct>
            </pointer>
            <primitive name="Magic" type="UInt32"/>
            <pointer name="additionalScriptTableOffset" type="UInt32">
                <!-- for now just display the first two bytes, detailed structure is still unknown -->
                <primitive name="val" type="UInt16"/>
            </pointer>
            <pointer name="gameTableOffset" type="UInt32">
                <!-- for now just display the first two bytes, detailed structure is still unknown -->
                <primitive name="val" type="UInt16"/>
            </pointer>
            <primitive name="productID" type="UInt32"/>
            <pointer name="registerInitValuesOffset" type="UInt32">
                <struct name="registerInitValuesStruct">
                    <primitive name="registerCount" type="UInt16"/>
                    <array name="registerInitValues" length="registerCount">
                        <primitive name="val" type="UInt16"/>
                    </array>
                </struct>
            </pointer>
            <primitive name="magicXORValue" type="UInt8"/>
            <array name="align" length="3">
                <primitive name="alignEmpty" type="UInt8"/>
            </array>
            <union name="formatString">
                <struct name="formatStringStruct">
                    <primitive name="formatStringLength" type="UInt8"/>
                    <array name="formatString" length="formatStringLength">
                        <primitive name="val" type="Char"/>
                    </array>
                    <string name="dateString" maxByteCount="8" encoding="ASCII"/>
                    <string name="languageString" maxByteCount="7" encoding="ASCII"/>
                </struct>
                <array name="formatStringByteField" length="64">
                    <primitive name="val" type="UInt8"/>
                </array>
            </union>
            <primitive name="unknown" type="UInt32"/>
            <array name="empty" length="13">
                <primitive name="val" type="UInt8"/>
            </array>
            <pointer name="powerOnSoundOffset" type="UInt32">
                <struct name="playlistlist">
                    <primitive name="listLength" type="UInt16"/>
                    <array name="playlistlistValues" length="listLength">
                        <pointer name="playlistlistValue" type="UInt32">
                            <struct name="playlist">
                                <primitive name="listLength" type="UInt16"/>
                                <array name="playlistValues" length="listLength">
                                    <primitive name="oid" type="UInt16"/>
                                </array>
                            </struct>
                        </pointer>
                    </array>
                </struct>
            </pointer>
            <array name="empty" length="23">
                <primitive name="val" type="UInt8"/>
            </array>
            <primitive name="unknownMagicNumberOffset1" type="UInt32"/>
            <pointer name="gameBinariesOffset" type="UInt32" target="gameBinaries">
                <struct name="gameBinaries">
                    <primitive name="gameBinaryCount" type="UInt32"/>
                    <primitive name="empty0" type="UInt32"/>
                    <primitive name="empty1" type="UInt32"/>
                    <primitive name="empty2" type="UInt32"/>
                    <array name="gameBinaryHeaderTable" length="gameBinaryCount">
                        <struct name="gameBinaryHeaderTableEntry">
                            <pointer name="binaryAddress" type="UInt32">
                                <array name="binaryData" length="function() { return this.parent.parent.binaryLength.value; }">
                                    <primitive name="val" type="char" />
                                </array>
                            </pointer>
                            <primitive name="binaryLength" type="UInt32"/>  
                            <array name="gameBinaryName" length="8">
                                <primitive name="val" type="Char" />
                            </array>
                        </struct>
                    </array>
                </struct>
            </pointer>
            <primitive name="unknownOIDPairOffset" type="UInt32"/>
            <primitive name="gameBinaryCountOffset2" type="UInt32"/>
            <primitive name="empty" type="UInt32"/>
            <primitive name="unknownMagicNumberOffset2" type="UInt32"/>
            <primitive name="unknownMagicNumber" type="UInt32"/>
            <primitive name="unknownMagicNumberOffset3" type="UInt32"/>
            <array name="futureUse" length="340">
                <primitive name="val" type="UInt8"/>
            </array>
        </struct>
     </struct>
</data>
